package pages

import (
	"fmt"
	"github.com/webbesoft/doorman/templates/layouts"
)

templ DashboardPage(topReferrers []struct {
	Referrer string
	Count    int64
}, topPages []struct {
	URL   string
	Count int64
}, dailyViews []struct {
	Date  string
	Count int64
}, uniqueVisitors int64, totalViews int64) {
	@layouts.AppLayout("Dashboard") {
		<!-- Modern gradient background -->
		<div class="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
			<!-- Enhanced navigation with doorman branding -->
			<nav class="bg-white/80 backdrop-blur-md border-b border-blue-100">
				<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
					<div class="flex justify-between h-20">
						<div class="flex items-center space-x-4">
							<!-- Doorman logo/icon -->
							<div class="flex items-center justify-center w-12 h-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl shadow-lg">
								<svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
								</svg>
							</div>
							<div>
								<h1 class="text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent">Doorman</h1>
								<p class="text-sm text-gray-500">Analytics Dashboard</p>
							</div>
						</div>
						<div class="flex items-center space-x-4">
							<div class="hidden sm:flex items-center space-x-2 text-sm text-gray-600">
								<div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
								<span>Live Monitoring</span>
							</div>
							<form action="/logout" method="post" class="inline">
								<button type="submit" class="flex items-center space-x-2 px-4 py-2 text-gray-600 hover:text-red-600 hover:bg-red-50 rounded-lg transition-all duration-200">
									<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
									</svg>
									<span class="hidden sm:inline">Sign Out</span>
								</button>
							</form>
						</div>
					</div>
				</div>
			</nav>
			<main class="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
				<!-- Enhanced Stats Overview with icons and animations -->
				<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
					<!-- Total Views Card -->
					<div class="group relative bg-white/70 backdrop-blur-sm p-6 rounded-2xl shadow-md border border-white/20 hover:shadow-lg transition-all duration-300 hover:-translate-y-1">
						<div class="absolute inset-0 bg-gradient-to-br from-blue-500/10 to-indigo-500/10 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
						<div class="relative flex items-center justify-between">
							<div>
								<div class="text-3xl font-bold text-blue-600 mb-1">{ fmt.Sprintf("%d", totalViews) }</div>
								<div class="text-gray-600 font-medium">Total Visitors</div>
								<div class="text-xs text-gray-400 mt-1">People through the door</div>
							</div>
							<div class="flex items-center justify-center w-14 h-14 bg-blue-100 rounded-2xl group-hover:scale-110 transition-transform duration-300">
								<svg class="w-7 h-7 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
								</svg>
							</div>
						</div>
					</div>
					<!-- Unique Visitors Card -->
					<div class="group relative bg-white/70 backdrop-blur-sm p-6 rounded-2xl shadow-md border border-white/20 hover:shadow-lg transition-all duration-300 hover:-translate-y-1">
						<div class="absolute inset-0 bg-gradient-to-br from-green-500/10 to-emerald-500/10 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
						<div class="relative flex items-center justify-between">
							<div>
								<div class="text-3xl font-bold text-green-600 mb-1">{ fmt.Sprintf("%d", uniqueVisitors) }</div>
								<div class="text-gray-600 font-medium">Unique Visitors</div>
								<div class="text-xs text-gray-400 mt-1">New faces today</div>
							</div>
							<div class="flex items-center justify-center w-14 h-14 bg-green-100 rounded-2xl group-hover:scale-110 transition-transform duration-300">
								<svg class="w-7 h-7 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
								</svg>
							</div>
						</div>
					</div>
					<!-- Return Rate Card -->
					<div class="group relative bg-white/70 backdrop-blur-sm p-6 rounded-2xl shadow-md border border-white/20 hover:shadow-lg transition-all duration-300 hover:-translate-y-1">
						<div class="absolute inset-0 bg-gradient-to-br from-purple-500/10 to-pink-500/10 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
						<div class="relative flex items-center justify-between">
							<div>
								<div class="text-3xl font-bold text-purple-600 mb-1">
									if totalViews > 0 {
										{ fmt.Sprintf("%.1f%%", float64(totalViews-uniqueVisitors)/float64(totalViews)*100) }
									} else {
										0.0%
									}
								</div>
								<div class="text-gray-600 font-medium">Return Rate</div>
								<div class="text-xs text-gray-400 mt-1">Familiar faces</div>
							</div>
							<div class="flex items-center justify-center w-14 h-14 bg-purple-100 rounded-2xl group-hover:scale-110 transition-transform duration-300">
								<svg class="w-7 h-7 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
								</svg>
							</div>
						</div>
					</div>
				</div>
				<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
					<div class="bg-white/70 backdrop-blur-sm p-8 rounded-2xl shadow-md border border-white/20 hover:shadow-lg transition-all duration-300">
						<div class="flex items-center justify-between mb-6">
							<div>
								<h3 class="text-xl font-bold text-gray-800 mb-1">Traffic Flow</h3>
								<p class="text-sm text-gray-500">Visitor patterns over the last 7 days</p>
							</div>
							<div class="flex items-center space-x-2 text-sm text-gray-500">
								<div class="w-3 h-3 bg-blue-500 rounded-full"></div>
								<span>Daily visitors</span>
							</div>
						</div>
						<div class="relative">
							<canvas id="viewsChart" width="400" height="250" class="rounded-lg"></canvas>
						</div>
					</div>
					<div class="bg-white/70 backdrop-blur-sm p-8 rounded-2xl shadow-md border border-white/20 hover:shadow-lg transition-all duration-300">
						<div class="flex items-center justify-between mb-6">
							<div>
								<h3 class="text-xl font-bold text-gray-800 mb-1">Popular Destinations</h3>
								<p class="text-sm text-gray-500">Most visited areas</p>
							</div>
							<div class="flex items-center justify-center w-8 h-8 bg-blue-100 rounded-lg">
								<svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
								</svg>
							</div>
						</div>
						<div class="space-y-3">
							if len(topPages) == 0 {
								<div class="flex items-center justify-center py-8 text-gray-500">
									<div class="text-center">
										<svg class="w-12 h-12 mx-auto mb-3 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
										</svg>
										<p>No page data yet</p>
									</div>
								</div>
							} else {
								for i, page := range topPages {
									<div class="group flex justify-between items-center p-3 hover:bg-blue-50 rounded-xl transition-all duration-200">
										<div class="flex items-center space-x-3 flex-1 min-w-0">
											<div class="flex items-center justify-center w-6 h-6 bg-gray-100 group-hover:bg-blue-100 rounded-md text-xs font-medium text-gray-600 group-hover:text-blue-600 transition-colors duration-200">
												{ fmt.Sprintf("%d", i+1) }
											</div>
											<span class="text-sm font-medium text-gray-700 truncate flex-1">{ page.URL }</span>
										</div>
										<div class="flex items-center space-x-2">
											<span class="text-sm font-bold text-gray-900">{ fmt.Sprintf("%d", page.Count) }</span>
											<div class="w-2 h-2 bg-blue-400 rounded-full opacity-60"></div>
										</div>
									</div>
								}
							}
						</div>
					</div>
				</div>
				<div class="mt-8">
					<div class="bg-white/70 backdrop-blur-sm p-8 rounded-2xl shadow-md border border-white/20 hover:shadow-lg transition-all duration-300">
						<div class="flex items-center justify-between mb-6">
							<div>
								<h3 class="text-xl font-bold text-gray-800 mb-1">Traffic Sources</h3>
								<p class="text-sm text-gray-500">Where visitors are coming from</p>
							</div>
							<div class="flex items-center justify-center w-8 h-8 bg-green-100 rounded-lg">
								<svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
								</svg>
							</div>
						</div>
						if len(topReferrers) == 0 {
							<div class="flex items-center justify-center py-8 text-gray-500">
								<div class="text-center">
									<svg class="w-12 h-12 mx-auto mb-3 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
									</svg>
									<p>No referrer data yet</p>
								</div>
							</div>
						} else {
							<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
								for i, ref := range topReferrers {
									<div class="group flex justify-between items-center p-4 hover:bg-green-50 rounded-xl border border-gray-100 hover:border-green-200 transition-all duration-200">
										<div class="flex items-center space-x-3 flex-1 min-w-0">
											<div class="flex items-center justify-center w-6 h-6 bg-gray-100 group-hover:bg-green-100 rounded-md text-xs font-medium text-gray-600 group-hover:text-green-600 transition-colors duration-200">
												{ fmt.Sprintf("%d", i+1) }
											</div>
											<span class="text-sm font-medium text-gray-700 truncate flex-1" title={ ref.Referrer }>
												if ref.Referrer == "" || ref.Referrer == "direct" {
													Direct Traffic
												} else {
													{ ref.Referrer }
												}
											</span>
										</div>
										<div class="flex items-center space-x-2">
											<span class="text-sm font-bold text-gray-900">{ fmt.Sprintf("%d", ref.Count) }</span>
											<div class="w-2 h-2 bg-green-400 rounded-full opacity-60"></div>
										</div>
									</div>
								}
							</div>
						}
					</div>
				</div>
			</main>
		</div>
		<script src="https://cdn.jsdelivr.net/npm/chart.js@4.5.0/dist/chart.umd.min.js"></script>
		<script>
			document.addEventListener('DOMContentLoaded', function() {
				const ctx = document.getElementById('viewsChart');
				if (!ctx) {
					console.error('Chart canvas not found');
					return;
				}

                const dailyViewsJSON = {{ templ.JSONString(dailyViews) }}

				const dailyViews = JSON.parse(dailyViewsJSON);

				const chartData = {
					labels: dailyViews.map((dailyView) => { return dailyView.Date }),
					datasets: [{
						label: 'Daily Visitors',
						data: dailyViews.map((dailyView) => { return dailyView.Count }),
						borderColor: 'rgb(59, 130, 246)',
						backgroundColor: 'rgba(59, 130, 246, 0.1)',
						borderWidth: 3,
						fill: true,
						tension: 0.4,
						pointBackgroundColor: 'rgb(59, 130, 246)',
						pointBorderColor: 'white',
						pointBorderWidth: 2,
						pointRadius: 6,
						pointHoverRadius: 8,
						pointHoverBackgroundColor: 'rgb(59, 130, 246)',
						pointHoverBorderColor: 'white',
						pointHoverBorderWidth: 3
					}]
				};

				const chart = new Chart(ctx, {
					type: 'line',
					data: chartData,
					options: {
						responsive: true,
						maintainAspectRatio: false,
						interaction: {
							intersect: false,
							mode: 'index'
						},
						plugins: {
							legend: {
								display: false
							},
							tooltip: {
								backgroundColor: 'rgba(0, 0, 0, 0.8)',
								titleColor: 'white',
								bodyColor: 'white',
								borderColor: 'rgba(59, 130, 246, 0.5)',
								borderWidth: 1,
								cornerRadius: 8,
								displayColors: false,
								callbacks: {
									title: function(tooltipItems) {
										return 'Date: ' + tooltipItems[0].label;
									},
									label: function(context) {
										return 'Visitors: ' + context.parsed.y.toLocaleString();
									}
								}
							}
						},
						scales: {
							x: {
								grid: {
									display: false
								},
								border: {
									display: false
								},
								ticks: {
									color: '#6B7280',
									font: {
										size: 12
									},
									maxRotation: 45
								}
							},
							y: {
								beginAtZero: true,
								grid: {
									color: 'rgba(156, 163, 175, 0.2)',
									drawBorder: false
								},
								border: {
									display: false
								},
								ticks: {
									color: '#6B7280',
									font: {
										size: 12
									},
									callback: function(value) {
										return value.toLocaleString();
									}
								}
							}
						},
						elements: {
							point: {
								hoverRadius: 8
							}
						},
						animation: {
							duration: 1000,
							easing: 'easeInOutQuart'
						}
					}
				});
			});
		</script>
	}
}
